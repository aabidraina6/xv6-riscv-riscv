1. user/user.h ,defs.h: definition of sigalarm
2. void -> uint64 in handler
3. code for sigalarm in trap.c
sigalarm_flag in proc.h

remove mem in uvmcopy? ; return at end
ref_c *pa or pa

// Copy from kernel to user.
// Copy len bytes from src to virtual address dstva in a given page table.
// Return 0 on success, -1 on error.
int
copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
{
  uint64 n, va0, pa0;
  while(len > 0){
    va0 = PGROUNDDOWN(dstva);
    if(va0 >= MAXVA) {
      return -1;
    }

    pte_t *pte;
    pte = walk(pagetable, va0, 0);
    if (pte == 0) {
      return -1;
    }

    if ((*pte & PTE_V) == 0) {
      return -1;
    }
    if ((*pte & PTE_U) == 0) {
      return -1;
    }

    if (*pte & PTE_RSW) {
      pa0 = PTE2PA(*pte);
      uint flags = PTE_FLAGS(*pte);
      // +Write, -COW
      flags |= PTE_W;
      flags &= (~PTE_RSW);

      char *mem = kalloc();
      memmove(mem, (void*)pa0, PGSIZE);
      uvmunmap(pagetable, va0, PGSIZE, 0);
      dec_ref((void*)pa0);
      if (mappages(pagetable, va0, PGSIZE, (uint64)mem, flags) != 0) {
        panic(“sometthing is wrong in mappages in trap.\n”);
      }
    }